{"title":"函数式编程","uid":"78bf35c97e41da6a2bdad05b63951aa3","slug":"Lambda表达式","date":"2023-10-11T18:23:00.000Z","updated":"2024-02-23T21:57:36.753Z","comments":true,"path":"api/articles/Lambda表达式.json","keywords":"Kangwei Zhu's Blog","cover":null,"content":"<h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1.概述\"></a>1.概述</h2><p>Lambda是JDK8中的一个<strong>语法糖</strong>。可以对匿名内部类的写法进行简化。是函数式编程思想的体现。<br>类型可以推导-&gt;省略类型<br>方法可以推导-&gt;省略方法</p>\n<h2 id=\"2-基本格式\"><a href=\"#2-基本格式\" class=\"headerlink\" title=\"2.基本格式\"></a>2.基本格式</h2><p>(参数列表) -&gt; 代码</p>\n<h2 id=\"3-实例\"><a href=\"#3-实例\" class=\"headerlink\" title=\"3. 实例\"></a>3. 实例</h2><p>之前在多线程的学习中提到过，线程Thread的创建方式比较知名的有三种：<strong>实现Thread、 new Thread(new Runnable())、实现Callable接口</strong>.<br>在第二种方法: 实现Runnable接口时，我们可以用一个<strong>匿名内部类</strong>，来创建实现Runnable接口的对象。</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki rose-pine-moon\" style=\"background-color: #232136\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #3E8FB0\">Thread</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #E0DEF4; font-style: italic\">thread</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">=</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">new</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">Thread</span><span style=\"color: #908CAA\">(</span><span style=\"color: #3E8FB0\">new</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">Runnable</span><span style=\"color: #908CAA\">()</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">    </span><span style=\"color: #908CAA\">@</span><span style=\"color: #3E8FB0\">Override</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">    </span><span style=\"color: #3E8FB0\">public</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #3E8FB0\">void</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">run</span><span style=\"color: #908CAA\">()</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #908CAA\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">        </span><span style=\"color: #E0DEF4; font-style: italic\">System</span><span style=\"color: #908CAA\">.</span><span style=\"color: #E0DEF4; font-style: italic\">out</span><span style=\"color: #908CAA\">.</span><span style=\"color: #EA9A97\">println</span><span style=\"color: #908CAA\">(</span><span style=\"color: #F6C177\">&quot;匿名内部类&quot;</span><span style=\"color: #908CAA\">);</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">    </span><span style=\"color: #908CAA\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #908CAA\">&#125;)</span></span>\n<span class=\"line\"><span style=\"color: #E0DEF4\">thread</span><span style=\"color: #908CAA\">.</span><span style=\"color: #EA9A97\">start</span><span style=\"color: #908CAA\">();</span></span></code></pre></div><p>通过Lambda，我们可以简化代码成：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki rose-pine-moon\" style=\"background-color: #232136\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #3E8FB0\">new</span><span style=\"color: #E0DEF4\"> </span><span style=\"color: #EA9A97\">Thread</span><span style=\"color: #908CAA\">(()</span><span style=\"color: #3E8FB0\">-&gt;</span><span style=\"color: #E0DEF4; font-style: italic\">System</span><span style=\"color: #908CAA\">.</span><span style=\"color: #E0DEF4; font-style: italic\">out</span><span style=\"color: #908CAA\">.</span><span style=\"color: #EA9A97\">println</span><span style=\"color: #908CAA\">(</span><span style=\"color: #F6C177\">&quot;匿名内部类&quot;</span><span style=\"color: #908CAA\">)).</span><span style=\"color: #E0DEF4; font-style: italic\">start</span><span style=\"color: #908CAA\">;</span></span></code></pre></div>","text":"1.概述Lambda是JDK8中的一个语法糖。可以对匿名内部类的写法进行简化。是函数式编程思想的体现。类型可以推导-&gt;省略类型方法可以推导-&gt;省略方...","permalink":"/post/Lambda表达式","photos":[],"count_time":{"symbolsCount":514,"symbolsTime":"1 mins."},"categories":[{"name":"Java基础","slug":"Java基础","count":3,"path":"api/categories/Java基础.json"}],"tags":[{"name":"Java基础","slug":"Java基础","count":1,"path":"api/tags/Java基础.json"},{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"},{"name":"Lambda表达式","slug":"Lambda表达式","count":1,"path":"api/tags/Lambda表达式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1.概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">2.基本格式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">3. 实例</span></a></li></ol>","author":{"name":"Kangwei Zhu","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/93107633?v=4","link":"/","description":"偏我来时不逢春，偏我去时春满城","socials":{"github":"https://github.com/KangweiZhu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"leetcode":{"icon":"/svg/leetcode-svgrepo-com.svg","link":"https://leetcode.com/anicaaovo/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SQL查漏补缺","uid":"0a779d0e741d0e316d7b9d9aa44bdfc9","slug":"SQL 查漏补缺","date":"2023-10-15T10:44:08.000Z","updated":"2024-02-23T21:57:36.757Z","comments":true,"path":"api/articles/SQL 查漏补缺.json","keywords":"Kangwei Zhu's Blog","cover":null,"text":"SQL查漏补缺 记录一下SQL刷题时候遇到的知识点漏洞 1. SQL !&#x3D; 和 &#x3D;&#x3D; 的适用场景 – SQL 中，!&#x3D; ...","permalink":"/post/SQL 查漏补缺","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"Kangwei Zhu","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/93107633?v=4","link":"/","description":"偏我来时不逢春，偏我去时春满城","socials":{"github":"https://github.com/KangweiZhu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"leetcode":{"icon":"/svg/leetcode-svgrepo-com.svg","link":"https://leetcode.com/anicaaovo/"}}}}},"next_post":{"title":"测试基础回顾","uid":"836018e6b061b33a02925aab024ae1c6","slug":"测试理论","date":"2023-10-08T16:36:00.000Z","updated":"2024-02-23T21:57:36.757Z","comments":true,"path":"api/articles/测试理论.json","keywords":"Kangwei Zhu's Blog","cover":"/img/cake.jpg","text":"1. 主流测试技术1.1 功能测试 验证程序的功能是否能满足需求 1.2 自动化测试 使用代码或工具代替手工，对项目进行测试 1.3 接口测试 测接口。 1.4...","permalink":"/post/测试理论","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"软件测试","slug":"软件测试","count":5,"path":"api/categories/软件测试.json"}],"tags":[{"name":"软件测试","slug":"软件测试","count":2,"path":"api/tags/软件测试.json"}],"author":{"name":"Kangwei Zhu","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/93107633?v=4","link":"/","description":"偏我来时不逢春，偏我去时春满城","socials":{"github":"https://github.com/KangweiZhu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"leetcode":{"icon":"/svg/leetcode-svgrepo-com.svg","link":"https://leetcode.com/anicaaovo/"}}}}}}